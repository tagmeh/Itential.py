[project]
name = "itential.py"
version = "2.0.0"
authors = [{ name = "Tagmeh" }]
description = "An opinionated Itential API library."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "requests",
    "pydantic"
]

[project.urls]
"Homepage" = "https://github.com/tagmeh/Itential.py"
"Bug Tracker" = "https://github.com/tagmeh/Itential.py/issues"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line_length = 120

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
ignore_missing_imports = true
strict = true
exclude = ["tests", "build", "dist", "itential.py.egg-info"]
plugins = ['pydantic.mypy']

[tool.coverage.run]
branch = true  # Show branch coverage.
include = ["itential/**"]  # We only care to test and view the main package.

[tool.coverage.report]
# Don't need to use 'include' here due to the 'include' in the tool.coverage.run section.
# Regexes for lines to exclude from consideration.
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
skip_covered = true
ignore_errors = true
fail_under = 60

[tool.coverage.html]
include = ["itential/**"]
directory = "coverage_html_report"

[tool.pytest.ini_options]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle
    "F",  # Pyflakes
    "UP",  # pyupgrade
    "B",  # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",  # isort
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore = [
    "E501",  # Avoid enforcing line-length violations (`E501`)
    "SIM108",  # Avoid ternaries at all costs.
]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in selected subdirectories.
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.format]
# For now, we use Black